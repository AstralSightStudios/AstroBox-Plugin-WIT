package astrobox:psys-host;

interface os {
    arch: func() -> future<string>;
    hostname: func() -> future<string>;
    locale: func() -> future<string>;
    platform: func() -> future<string>;
    version: func() -> future<string>;
}

interface transport {
    enum protocol {
        XIAOMI-VELA-V5-PROTOBUF,
    }

    send: func(device-addr: string, data: list<u8>) -> future;
    to-json: func(protocol: protocol, data: list<u8>) -> string;
    from-json: func(protocol: protocol, data: string) -> result<list<u8>>;
}

interface device {
    record device-info {
        name: string,
        addr: string
    }

    get-device-list: func() -> future<list<device-info>>;
    get-connected-device-list: func() -> future<list<device-info>>;
    disconnect-device: func(addr: string) -> future<result>;
}

interface register {
    record transport-recv-filer {
        xiaomi-vela-v5-channel-id: u32,
        xiaomi-vela-v5-protobuf-typeid: u32,
    }

    enum provider-type {
        URL,
        CUSTOM
    }

    register-transport-recv: func(addr: string, filter: transport-recv-filer) -> future<result>;
    register-interconnect-recv: func(addr: string, pkg-name: string) -> future<result>;
    register-deeplink-action: func() -> future<result>;
    register-provider: func(name: string, provider-type: provider-type) -> future<result>;
}

interface event {
    send-event: func(event-name: string, payload: string);
}

interface queue {
    enum resource-type {
        quickapp,
        watchface,
        firmware
    }

    add-resource-to-queue: func(res-type: resource-type, file-path: string);
}

interface interconnect {
    send-qaic-message: func(device-addr: string, pkg-name: string, data: string) -> future<result>;
}

interface picker {
    record pick-config {
        read: bool,
        copy-to: option<string>,
    }

    record filter-config {
        multiple: bool,
        extensions: list<string>,
        default-directory: string,
        default-file-name: string,
    }

    record pick-result {
        name: string,
        data: list<u8>,
    }

    pick-file: func(config: pick-config, filter: filter-config) -> future<pick-result>;
}

interface thirdpartyapp {
    record app-info {
        package-name: string,
        fingerprint: list<u32>,
        version-code: u32,
        can-remove: bool,
        app-name: string
    }

    launch-qa: func(addr: string, app-info: app-info, page-name: string) -> future<result>;
    get-thirdparty-app-list: func(addr: string) -> future<result<list<app-info>>>;
}
